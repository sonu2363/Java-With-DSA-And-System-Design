
Q1. Given an integer, find out the sum of its digits using Recursion.

Ans:
class Solution {
    public static void main(String[] args) {
        int num=1234;
        int result=sumOfDigits(num);
        System.out.println(result);
       
    }
    public static int sumOfDigits(int num){
       if(num==0){
           return 0;
       }
       else{
        return num%10+sumOfDigits(num/10);
       }
    }
}

Q2. Given a number n.Find the sum of natural numbers till n but with alternate signs.
That means if n=5 then you have to return 1-2+3-4+5=3 as your answer.
Constraints: 0<=n<=1e6
Input1:n=10
Output1:-5
Explanation:1-2+3-4+5-6+7-8+9-10=-5
Input2:n=5
Output2:3

Ans:
class Solution {
    public static void main(String[] args) {
        int num=5;
        int result=sumOfDigits(num);
        System.out.println(result);
       
    }
    public static int sumOfDigits(int num){
       if(num==1){
           return 1;
       }
       else{
          int sign=(num%2==0) ? -1 : 1;
          return sign*num+sumOfDigits(num-1);

       }
    }
}

Q3. WAP to print the max value of the array [13,-1,3,22,5] in java

Ans:
class Solution {
    public static void main(String[] args) {
        int arr[]={13,-1,3,22,5};
        int result=findLargest(arr,0);
        System.out.println(result);
       
    }
    public static int findLargest(int arr[],int index){
       if(index==arr.length-1){
           return arr[index];
       }
       else{
         int max=findLargest(arr, index+1);
         return Math.max(arr[index],max);
       }
    }
}

Q4.Find the sum of the values of the array [92,23,15,-20,10] in java.

Ans:
class Solution {
    public static void main(String[] args) {
        int arr[]={13,-1,3,22,5};
        int result=findSum(arr,0);
        System.out.println(result);
       
    }
    public static int findSum(int arr[],int index){
       if(index==arr.length-1){
           return arr[index];
       }
       else{
         
         return arr[index]+findSum(arr, index+1);
       }
    }
}

Q5. Given a number n.Print if it is Armstrong or not using Recursion.

Ans

class Solution {
    public static void main(String[] args) {
        int num=1534;
        int result=findSum(num,0);
        if(result==num){
            System.out.println("armstrong number");
        }
        else{
            System.out.println("not a armstrong number");
        }
        
       
    }
    public static int findSum(int num,int sum){
       if(num==0){
        return sum;
       }
       else{
        int digit=num%10;
        int updatedSum=sum+(digit*digit*digit);
        return findSum(num/10, updatedSum);
       }
    }
}