Q1. Given an array. Find the number X in the array.If the element is present, return
index of the element, else print "element not found in array". Input the size of the
array,array from user and the element X from user.Use Linear Search to find the element.
Input:Enter the number of elements which you want to add : 5
      Enter the elements of the array : 6
      2
      3
      1
      7
      Enter the elements to be searched in array : 2
      1

Answer:
import java.util.Scanner;

class Solution{
    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);  
        System.out.println("enter the number of elements you want to add : ");
        int size=sc.nextInt();
        int[] arr=new int[size];
        System.out.print("enter the elements of the array");
        for(int i=0;i<size;i++){
               arr[i]=sc.nextInt();
        }
        System.out.print("enter the element to be searched : ");
        int x=sc.nextInt();
        sc.close();

        int result=linearSearch(arr, x);
        if(result!=-1)
        {
            System.out.print(result);
        }
        else{
            System.out.println("elements not found in array");
        }
        
}
    public static int linearSearch(int[] arr,int x){
        for(int i=0;i<arr.length;i++){
            if(arr[i]==x){
                return i;
            }
        }
        return -1;
        
    }
}


Q2. Given an array and an integer "target",return the last occurrence of "target" in
the array.If the target is not present return -1
Input:arr=[1 1 1 2 3 4 4 5 6 6 6 6],target=4
Output:6

Ans:
import java.util.Scanner;

class Solution {
    public static void main(String[] args) {
        // Using Binary Search
        int nums[] = {1, 1, 1, 2, 3, 4, 4, 5, 6, 6, 6, 6};
        int target = 4;
        int start = 0, end = nums.length - 1, lastOccurrence = -1;
        
        while (start <= end) {
            int mid = start + (end - start) / 2;
            
            if (nums[mid] == target) {
                lastOccurrence = mid;
                start = mid + 1;
            } else if (nums[mid] < target) {
                start = mid + 1;
            } else {
                end = mid - 1;
            }
        }
        
        if (lastOccurrence != -1) {
            System.out.println(lastOccurrence);
        } else {
            System.out.println("not found");
        }
    }
}

Q3. Given a sorted binary array , effeciently count the total number of 1's in it.

Input:[0 0 0 0 1 1 1 1 1 1]
Output:6

Ans:
import java.util.Scanner;

class Solution {
    public static void main(String[] args) {
       
        int nums[] = {0,0,0,0,1,1,1,1,1,1};
        int count=0;
        for(int i=0;i<nums.length;i++){
            if(nums[i]==1){
                count++;
            }

        }
        System.out.println(count);
    }
}

Q4. Given a sorted integer array containing duplicates, count occurrences of a given
number. If the element is not fount in the array, report that as well.
Input:nums[]=[2,5,5,5,6,6,8,9,9,9]
target=5
Output:target 5 occurs 3 times

Ans:
import java.util.Scanner;

class Solution {
    public static void main(String[] args) {
        
        int nums[] = {0,0,0,0,1,1,1,1,1,1};
        int count=0;int target=1;
        for(int i=0;i<nums.length;i++){
            if(nums[i]==target){
                count++;
            }

        }
        System.out.println(count);
    }
}

Q5. Given a positive integer num, return true if num is a perfect square or false
otherwise.
A perfect square is an integer that is the square of integer.In other words, it is 
the product of some integer with itself.
Input:num=16
Output:true

Ans:
class Solution {
    public static void main(String[] args) {
        
        int number=16;
        int sqrt=(int)Math.sqrt(number);
        if(sqrt*sqrt==number){
             System.out.println("true");
        }
        else{
            System.out.println("false");
        }
    }
}