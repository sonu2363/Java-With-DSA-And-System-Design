Q1. How to Create an Object in Java?

Ans:
class Test
{
    int age;
    public static void main(String [] args)
    {
        Test obj=new Test();
        System.out.println(obj.age);
    }
    
}

Q2. What is the use of a new keyword in Java?

Ans:We can use the "new" keyword to create an object.

Q3. What are the different types of variables in Java?

Ans:Based on the type of value represented by a variable all variables are divided into 2 types. They are:
1. Primitive variables
2. Reference variables
Primitive variables:
Primitive variables can be used to represent primitive values.
Example: int x=10;
Reference variables: Reference variables can be used to refer objects.
Example: Student s=new Student();

Based on the behavior and position of declaration all variables are divided into the following 3 types.
1. Instance variables
2. Static variables
3. Local variables

Q4. What is the difference between Instance variable and local variables?

Ans:Instance variable: Instance variables will be created at the time of object creation and destroyed at the time of object destruction hence the scope of instance variables is exactly the same as scope of objects.


     Example:
     class Test
{
    int age;//Instance Variable declared
    public static void main(String [] args)
    {
        Test obj=new Test();
        System.out.println(obj.age);
    }    
}


Local variables: The local variables ,will be created as part of the block execution in ,which it is declared and destroyed once that block execution completes. Hence the scope of the local variables is exactly the same as the scope of the block in which we declared.

Example:class Test
{  
    public static void main(String [] args)
    {
        int age=10;//Local Variable declared        
        System.out.println(age);
    }    
}

Q5. In which area memory is allocated for instance variable and local variable?

Ans:For Instance variable, memory will be allocated on Heap.For Local variable, memory will be allocated on the Stack

Q6. What is method overloading?

Ans: Two methods are said to be overloaded if and only if both have the same name but different argument types.
class Test
{  
    public void m1(){
        System.out.println("zero arg method");
    }
    public void m1(int i)
    {
        System.out.println("int arg method");
    }
    public void m1(double d)
    {
        System.out.println("double arg method");
    }
    public static void main(String [] args)
    {
       Test t=new Test();
       t.m1();
       t.m1(10);
       t.m1(10.5);

    }    
}

Output
zero arg method
int arg method
double arg method